// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  resetToken       String?
  resetTokenExpiry DateTime?
  Notification     Notification[]
  Certification    Certification[]
  Course           Course[]
  Enrollment       Enrollment[]
  Favorite         Favorite[]
  Quiz             Quiz[]
}

enum Role {
  TRAINER
  USER
}

model Certification {
  id       String   @id @default(uuid())
  title    String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  // course   Course   @relation(fields: [courseId], references: [id])
  courseId String
  issuedAt DateTime @default(now())
  certLink String?
  Course   Course   @relation(fields: [courseId], references: [id])
}

model Notification {
  id        String           @id @default(uuid())
  message   String
  type      NotificationType
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
}

enum NotificationType {
  SUCCESS
  REMINDER
  WARNING
}

model Course {
  id          String   @id @default(uuid())
  title       String
  description String
  thumbnail   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  enrollments    Enrollment[]
  favorites      Favorite[]
  modules        Module[]
  // assignments    Assignment[]
  quizzes        Quiz[]
  certifications Certification[]

  createdBy User?   @relation(fields: [trainerId], references: [id])
  trainerId String?
}

model Enrollment {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   String
  progress   Int      @default(0)
  completed  Boolean  @default(false)
  enrolledAt DateTime @default(now())
}

model Favorite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime @default(now())
}

model Module {
  id          String   @id @default(uuid())
  title       String
  description String?
  content     String // Could be markdown, HTML, video embed URL, etc.
  order       Int // To define module order in the course
  duration    Int? // Estimated duration in minutes
  videoUrl    String? // Optional: URL to a lecture video
  resources   String[] // Optional: links to external docs, slides, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course   Course @relation(fields: [courseId], references: [id])
  courseId String
}

model Quiz {
  id        String     @id @default(uuid())
  title     String
  course    Course     @relation(fields: [courseId], references: [id])
  courseId  String
  trainer   User       @relation(fields: [trainerId], references: [id])
  trainerId String
  questions Question[]
  createdAt DateTime   @default(now())
}

model Question {
  id      String   @id @default(uuid())
  text    String
  options String[]
  correct String
  quiz    Quiz     @relation(fields: [quizId], references: [id])
  quizId  String
}
